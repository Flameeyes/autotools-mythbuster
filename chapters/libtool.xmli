<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="libtool">
  <?dbhtml filename="libtool/index.html" ?>

  <title>Building All Kinds of Libraries —
  <application>libtool</application></title>

  <indexterm zone="libtool">
    <primary>libtool</primary>
  </indexterm>

  <indexterm>
    <primary>GNU libtool</primary>
    <see>libtool</see>
  </indexterm>

  <para>
    While autotools are vastly considered black magic, because they
    tend to show a black box abstracting lots of details about
    compilers, makefiles and dependencies, the component that can be
    truly said to be black magic is certainly
    <application>libtool</application>.
  </para>

  <para>
    The <command>libtool</command> script is a huge script that
    allows the developers to ignore, at least partially, all the
    complex details related to <emphasis>shared objects</emphasis>
    and their creation. This is needed because this is one of the
    areas that changes most between operating systems, both in terms
    of actual technical requirements and in terms of conventions.
  </para>

  <note>
    <para>
      Among the different conventions between different operating
      systems, the first one to disambiguate is the name used to
      identify these types of files; almost every other operating
      system changed the name used.
    </para>

    <para>
      Unix systems classically called these <emphasis>shared
      objects</emphasis> and this is the name that will be used in
      this guide. People more involved in another operating system
      might know them as “dynamically-linked libraries” (DLL) or
      simply “dynamic libraries”.
    </para>
  </note>

  <para>
    Some (older) operating systems might not provide any support for
    shared objects at all; others might require they be built in a specific
    (non-default) file format. Some architectures insist that shared
    objects are built with Position-Independent Code (a feature
    enabled by the compiler). For those operating systems that do
    support them, the versioning rules might vary enormously.
  </para>

  <para>
    All these details make it difficult to simply build shared
    objects in the same way on all operating systems, and here is
    where <application>libtool</application> enters the scene: the
    <command>libtool</command> script is a frontend to various
    compilers and linkers that takes care of abstracting most of the
    syntax, and of the details for building the libraries.
  </para>

  <para>
    Because of these changes, the <application>libtool</application>
    package is probably the most complex part of the autotools
    stack, and also one that is often avoided by those looking for a
    simpler build system. Alternatives to using straight
    <application>libtool</application> are explained in the section
    <xref linkend="libtool.alternatives" />.
  </para>

  <warning>
    <para>
      OpenBSD is known as of July 2012 to use their own implementation
      of <command>libtool</command> which is not 100% compatible with
      the original GNU implementation.
    </para>

    <para>
      Unless otherwise stated, all the documentation in this guide and
      in particular in this chapter is discussing the original GNU
      projects and packages, and might or might not apply to OpenBSD's
      own versions.
    </para>
  </warning>

  <xi:include parse="xml" href="libtool/wrappers.xmli" />
  <xi:include parse="xml" href="libtool/plugins.xmli" />
  <xi:include parse="xml" href="libtool/symbols.xmli" />
  <xi:include parse="xml" href="libtool/version.xmli" />
  <xi:include parse="xml" href="libtool/lafiles.xmli" />
</chapter>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
