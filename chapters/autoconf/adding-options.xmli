<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="autoconf.arguments">
  <title>Adding Options</title>

  <para>
    One of the most important features that are available to
    developers using <application>autoconf</application> is certainly
    the ability to add new options to the
    <command>./configure</command> execution, to provide optional
    build-time support to users. Unfortunately, because of the
    importance of this feature, it's also one that is most commonly
    misused.
  </para>

  <para>
    There are three type of options (or, most properly, arguments)
    that can be added to the <filename>configure</filename> script:
  </para>

  <variablelist>
    <varlistentry>
      <term>
	<command>--enable-*</command>/<command>--disable-*</command>
	arguments
      </term>

      <listitem><para>
	The arguments starting with <command>--enable-</command>
	prefix are usually used to enable features of the
	program. They usually add or remove dependencies only if these
	are needed just for the particular feature being enabled or
	disabled.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<command>--with-*</command>/<command>--without-*</command>
	arguments
      </term>

      <listitem><para>
	The arguments starting with <command>--with-</command> prefix
	are usually used to add or remove dependencies on external
	projects. These might add or remove features from the project.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term>environment variables</term>

      <listitem><para>
	Environment variables that are used by the
	<filename>configure</filename> script should also be declared
	as arguments; their use will be explained below in detail.
      </para></listitem>
    </varlistentry>
  </variablelist>

  <para>
    The first two kinds of parameters differ just for the displayed
    name and from the macro used, but are in effect handled mostly in
    the same way. They both are actually used to pass variables, in
    the form of <command>--(enable|with)-foo=bar</command> and both
    provide defaults for when the variable is omitted (the value
    <constant>yes</constant> for <command>--enable</command> and
    <command>--with</command> and the value <constant>no</constant>
    for <command>--disable</command> and
    <command>--without</command>).
  </para>

  <para>
    While there is no technical difference between the two, it's
    helpful for both users and distribution to follow the indications
    given above about the use of the two parameters' kind. This allows
    to identify exactly what the parameters are used for.
  </para>

  <para>
    The environment variables are a recent additions to
    <application>autoconf</application> and are indeed used by a
    minority of the projects based on this build system.
  </para>

  <section>
    <title>AC_ARG_ENABLE and AC_ARG_WITH</title>

    <para>
      For declaring the arguments with <command>--enable</command> and
      <command>--with</command> prefixes, you have two different
      macros that work in basically the same way:
      <function>AC_ARG_ENABLE</function> and
      <function>AC_ARG_WITH</function>. Because they work in the same
      way, the following explanation will only talk about the former,
      but the same applies for the latter.
    </para>

    <para>
      Keeping in mind what has been said above, about the parameters
      actually taking a value, and defaulting to either
      <constant>yes</constant> or <constant>no</constant>, the
      parameters of the macro are as follow: 
    </para>

    <programlisting><![CDATA[
AC_ARG_ENABLE(option-name, help-string, action-if-present, action-if-not-present)
]]></programlisting>

    <variablelist>
      <varlistentry>
	<term><parameter>option-name</parameter></term>
	<listitem>
	  <para>
	    Name of the argument, this will be used for both the
	    actual argument option and for the variable to store the
	    result in. It's useful to keep to a subset of characters
	    here, since it'll be translated to a string compatible
	    with sh variable names.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>help-string</parameter></term>

	<listitem>
	  <para>
	    This is the string used to describe the parameter when
	    running <command>./configure --help</command>. Often it's
	    passed raw directly to the macro, but that will likely
	    make the text not align or fill properly in the help
	    text. It's customary to use then the <link
	    linkend="autoconf.arguments.helpstrings">AS_HELP_STRING</link>
	    parameter to create the string.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>action-if-present</parameter></term>

	<listitem>
	  <para>
	    This is the M4sh code used when the user has passed a
	    parameter through <command>--enable-foo</command>; the
	    value of the parameter, if any, is given through the
	    <varname>$enableval</varname> (or
	    <varname>$withval</varname>) local variable.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>action-if-not-present</parameter></term>

	<listitem>
	  <para>
	    This is the M4sh code executed when no parameter of any
	    kind for the given option name has been given at
	    <command>./configure</command>; this allows to set the
	    default value for variables that are otherwise calculated
	    in the previous action.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <warning>
      <para>
	The most common mistake for this macro is to consider the two
	actions as <parameter>action-if-enabled</parameter> and
	<parameter>action-if-disabled</parameter>.
      </para>

      <para><emphasis>This is not the case!</emphasis></para>

      <para>
	Since using <command>--disable-foo</command> or
	<command>--enable-foo=no</command> are equivalent, for the
	macro, you cannot really use this macro with those meanings.
      </para>
    </warning>

    <para>
      For most uses, there is no actual need to define actions, since
      the default for <application>autoconf</application> when no
      action is defined for the case the user give a parameter is to
      set a special variable named with the <varname>enable_</varname>
      (or <varname>with_</varname>) prefix, like
      <varname>enable_foo</varname>.
    </para>

    <example>
      <title>
	Using <function>AC_ARG_ENABLE</function> without actions
      </title>

      <programlisting><![CDATA[
dnl Example of default-enabled feature
AC_ARG_ENABLE([foo],
    AS_HELP_STRING([--disable-foo], [Disable feature foo]))

AS_IF([test "x$enable_foo" != "xno"], [
  dnl Do the stuff needed for enabling the feature
])

dnl Enable of default-disabled feature
AC_ARG_ENABLE([bar],
    AS_HELP_STRING([--enable-bar], [Enable feature foo]))

AS_IF([test "x$enable_foo" = "xyes"], [
  dnl Do the stuff needed for enabling the feature
])
]]></programlisting>

      <para>
	In the above example, only the recognised options of
	<constant>no</constant> and <constant>yes</constant>
	(respectively for each case) are used; any other value given
	(e.g. <command>--enable-foo=baz</command> or
	<command>--enable-bar=fnord</command>) would be ignored and
	treated in the same way as the default value of no parameter
	given.
      </para>

      <para>
	Further safety check for the value to not be anything but
	<constant>yes</constant> or <constant>no</constant> can be
	added, but are usually not necessary for the simplest cases.
      </para>
    </example>
  </section>

</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "english"
   End:
-->
