<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="autoconf.arguments">
  <title>Adding Options</title>

  <para>
    One of the most important features that are available to
    developers using <application>autoconf</application> is certainly
    the ability to add new options to the
    <command>./configure</command> execution, to provide optional
    build-time support to users. Unfortunately, because of the
    importance of this feature, it's also one that is most commonly
    misused.
  </para>

  <para>
    There are three type of options (or, most properly, arguments)
    that can be added to the <filename>configure</filename> script:
  </para>

  <variablelist>
    <varlistentry>
      <term>
	<command>--enable-*</command>/<command>--disable-*</command>
	arguments
      </term>

      <listitem><para>
	The arguments starting with <command>--enable-</command>
	prefix are usually used to enable features of the
	program. They usually add or remove dependencies only if these
	are needed just for the particular feature being enabled or
	disabled.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<command>--with-*</command>/<command>--without-*</command>
	arguments
      </term>

      <listitem><para>
	The arguments starting with <command>--with-</command> prefix
	are usually used to add or remove dependencies on external
	projects. These might add or remove features from the project.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term>environment variables</term>

      <listitem><para>
	Environment variables that are used by the
	<filename>configure</filename> script should also be declared
	as arguments; their use will be explained below in detail.
      </para></listitem>
    </varlistentry>
  </variablelist>

  <para>
    The first two kinds of parameters differ just for the displayed
    name and from the macro used, but are in effect handled mostly in
    the same way. They both are actually used to pass variables, in
    the form of <command>--(enable|with)-foo=bar</command> and both
    provide defaults for when the variable is omitted (the value
    <constant>yes</constant> for <command>--enable</command> and
    <command>--with</command> and the value <constant>no</constant>
    for <command>--disable</command> and
    <command>--without</command>).
  </para>

  <para>
    While there is no technical difference between the two, it's
    helpful for both users and distribution to follow the indications
    given above about the use of the two parameters' kind. This allows
    to identify exactly what the parameters are used for.
  </para>

  <para>
    The environment variables are a recent additions to
    <application>autoconf</application> and are indeed used by a
    minority of the projects based on this build system.
  </para>

  <section>
    <title>AC_ARG_ENABLE and AC_ARG_WITH</title>

    <para>
      For declaring the arguments with <command>--enable</command> and
      <command>--with</command> prefixes, you have two different
      macros that work in basically the same way:
      <function>AC_ARG_ENABLE</function> and
      <function>AC_ARG_WITH</function>. Because they work in the same
      way, the following explanation will only talk about the former,
      but the same applies for the latter.
    </para>

    <para>
      Keeping in mind what has been said above, about the parameters
      actually taking a value, and defaulting to either
      <constant>yes</constant> or <constant>no</constant>, the
      parameters of the macro are as follow: 
    </para>

    <programlisting><![CDATA[
AC_ARG_ENABLE(option-name, help-string, action-if-present, action-if-not-present)
]]></programlisting>

    <variablelist>
      <varlistentry>
	<term><parameter>option-name</parameter></term>
	<listitem>
	  <para>
	    Name of the argument, this will be used for both the
	    actual argument option and for the variable to store the
	    result in. It's useful to keep to a subset of characters
	    here, since it'll be translated to a string compatible
	    with sh variable names.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>help-string</parameter></term>

	<listitem>
	  <para>
	    This is the string used to describe the parameter when
	    running <command>./configure --help</command>. Often it's
	    passed raw directly to the macro, but that will likely
	    make the text not align or fill properly in the help
	    text. It's customary to use then the <link
	    linkend="autoconf.arguments.helpstrings">AS_HELP_STRING</link>
	    parameter to create the string.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>action-if-present</parameter></term>

	<listitem>
	  <para>
	    This is the M4sh code used when the user has passed a
	    parameter through <command>--enable-foo</command>; the
	    value of the parameter, if any, is given through the
	    <varname>$enableval</varname> (or
	    <varname>$withval</varname>) local variable.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>action-if-not-present</parameter></term>

	<listitem>
	  <para>
	    This is the M4sh code executed when no parameter of any
	    kind for the given option name has been given at
	    <command>./configure</command>; this allows to set the
	    default value for variables that are otherwise calculated
	    in the previous action.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <warning>
      <para>
	The most common mistake for this macro is to consider the two
	actions as <parameter>action-if-enabled</parameter> and
	<parameter>action-if-disabled</parameter>.
      </para>

      <para><emphasis>This is not the case!</emphasis></para>

      <para>
	Since using <command>--disable-foo</command> or
	<command>--enable-foo=no</command> are equivalent, for the
	macro, you cannot really use this macro with those meanings.
      </para>
    </warning>

    <para>
      For most uses, there is no actual need to define actions, since
      the default for <application>autoconf</application> when no
      action is defined for the case the user give a parameter is to
      set a special variable named with the <varname>enable_</varname>
      (or <varname>with_</varname>) prefix, like
      <varname>enable_foo</varname>.
    </para>

    <example>
      <title>
	Using <function>AC_ARG_ENABLE</function> without actions
      </title>

      <programlisting><![CDATA[
dnl Example of default-enabled feature
AC_ARG_ENABLE([foo],
    AS_HELP_STRING([--disable-foo], [Disable feature foo]))

AS_IF([test "x$enable_foo" != "xno"], [
  dnl Do the stuff needed for enabling the feature
])

dnl Enable of default-disabled feature
AC_ARG_ENABLE([bar],
    AS_HELP_STRING([--enable-bar], [Enable feature foo]))

AS_IF([test "x$enable_foo" = "xyes"], [
  dnl Do the stuff needed for enabling the feature
])
]]></programlisting>

      <para>
	In the above example, only the recognised options of
	<constant>no</constant> and <constant>yes</constant>
	(respectively for each case) are used; any other value given
	(e.g. <command>--enable-foo=baz</command> or
	<command>--enable-bar=fnord</command>) would be ignored and
	treated in the same way as the default value of no parameter
	given.
      </para>

      <para>
	Further safety check for the value to not be anything but
	<constant>yes</constant> or <constant>no</constant> can be
	added, but are usually not necessary for the simplest cases.
      </para>
    </example>

    <section xml:id="autoconf.arguments.helpstrings">
      <title>The Help Strings</title>

      <para>
	Some words have to be spent for the help strings used for
	declaring parameters with both
	<function>AC_ARG_ENABLE</function> and
	<function>AC_ARG_WITH</function>, since they have changed in
	the past versions of <application>autoconf</application> and
	they tend to be often mistakenly used.
      </para>

      <para>
	The second parameter for the two macros above is the
	description string as outputted by <command>./configure
	--help</command>; since proper formatting of that string is
	almost impossible to achieve by hand, there is a macro that
	<application>autoconf</application> provides to generate it:
	<function>AS_HELP_STRING</function> (replacing the former,
	deprecated macro <function>AC_HELP_STRING</function>, which is
	virtually identical, but has a less clear name).
      </para>

      <para>
	This macro takes care of properly aligning the text, breaking
	the lines where needed. For instance take the following
	fragment:
      </para>

      <programlisting><![CDATA[

dnl configure.ac text…

dnl to give an example of default-provided help text
AC_HEADER_ASSERT
AC_ARG_ENABLE([foo], [  --enable-foo		enable the use of foo through this very long and boring help text])
AC_ARG_ENABLE([bar],
  AS_HELP_STRING([--enable-bar],
    [enable the use of foo through this very long and boring help text])
)

# output from ./configure --help
  --disable-assert        turn off assertions
  --enable-foo		enable the use of foo through this very long and boring help text
  --enable-bar            enable the use of foo through this very long and
                          boring help text
]]></programlisting>

      <para>
	As you can see the text that is not typeset through the use of
	<function>AS_HELP_STRING</function> is not properly aligned
	(the distance used in the example is two tabulations, at most
	sixteen spaces, depending on the length of the option text,
	which falls short of two spaces).
      </para>

      <para>
	It's not really important for what concerns the functionality
	of the script, but it's useful to keep for consistency. Also,
	this allows software inspecting
	<filename>configure.ac</filename> files to identify the
	available options (for eventual graphical frontends to
	<command>./configure</command> or auto-generation of
	packaging description files (RPM specifications, Gentoo
	ebuilds, …).
      </para>
    </section>
  </section>

  <section>
    <title>Automatic Dependencies with AC_ARG_WITH</title>

    <para>
      Sometimes, the external dependencies of a project can be an
      hassle, especially if they enable optional features that not
      every operating system supports or that some users don't really
      care about. For this reason, they are often made optional,
      non-mandatory.
    </para>

    <para>
      When the option is non-mandatory, but it's desirable if certain
      software is present in the system, it's usual to make the
      dependency automatic. Automatic dependencies are enabled only if
      the needed libraries are found, and “soft-fail” in disabling the
      features if they are not.

      Distributions further specialise this class in automatic and
      <emphasis>automagic</emphasis> dependencies; this latter name is
      used for those dependencies that don't allow to be overridden,
      and thus will always enable the features if the libraries are
      found, and always soft-fail when they are not found.

      For distributions like Gentoo Linux that build on users'
      systems, this situation is actually a problem and has to be
      resolved for properly packaging the software.
    </para>

    <para>
      To avoid this kind of problem, the best thing is to implement a
      <command>--with</command> parameter that allows to override the
      automatic detection: forcing it to yes would make the code fail
      entirely when the library is not detected, and forcing it to no
      would make the code skip over the check entirely.
    </para>

    <example>
      <title>
	Using <function>AC_ARG_WITH</function> to declare automatic
	dependencies.
      </title>

      <programlisting><![CDATA[
AC_ARG_WITH([foo],
    AS_HELP_STRING([--without-foo], [Ignore presence of foo and disable it]))

AS_IF([test "x$with_foo" != "xno"],
      [CHECK_FOR_FOO([have_foo=yes], [have_foo=no])],
      [have_foo=no])

AS_IF([test "x$have_foo" = "xyes"],
      [do_whatever_needed],
      [AS_IF([test "x$with_foo" = "xyes"],
             [AC_MSG_ERROR([foo requested but not found])
      ])
])
]]></programlisting>

      <para>
	Once again, the empty value, and any other value from
	<constant>yes</constant> and <constant>no</constant> are
	handled together as a default case (that we could call the
	<constant>auto</constant> case), and no extra sanity check is
	added.
      </para>

      <para>
	The library is checked for unless explicitly requested not to,
	and the <varname>$have_foo</varname> variable is set
	accordingly. If foo hasn't been found, but there was an
	explicit request for it, an error message is displayed and the
	<filename>configure</filename> script stops there.
      </para>
    </example>
  </section>

  <section>
    <title>Environment Variables as Arguments</title>

    <para>
      The <function>AC_ARG_VAR</function> macro is used to declare a
      particular (environment) variable as an argument for the script,
      giving it a description and a particular use. While this feature
      has been added relatively recently in the history of
      <application>autoconf</application>, it is really important.

      Reflecting its younger presence, the macro does not need the
      <function>AS_HELP_STRING</function> helper, and only takes two
      parameters: the name of the variable and the string printed
      during <command>./configure --help</command>:
    </para>

    <programlisting><![CDATA[
AC_ARG_VAR(var-name, help-string)
]]></programlisting>

    <para>
      By default, <filename>configure</filename> picks up the
      variables from the environment like any other sh script. Most of
      those are, though, ignored; those who are not, should be
      declared through this macro. This way, they are marked as
      <emphasis>precious</emphasis> variable.
    </para>

    <para>
      A variable marked as <emphasis>precious</emphasis> gets replaced
      in the <filename>Makefile.in</filename> without having to call
      an explicit <function>AC_SUBST</function>, but that's not the
      most important part of the definition. What is important is that
      the variable is cached.
    </para>

    <para>
      When running <command>./configure</command> with the variable
      set (both when setting it in the environment and when setting it
      just for the execution via <command>./configure
      FOO=bar</command>), its value is saved in either the proper
      cache file (if requested, see <link linkend="autoconf.caching"
      />) or in the configuration status. This in turn produces two
      effects:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  the variable is compared for consistency between different
	  cached runs, to avoid re-using an incompatible cache file;
	</para>
      </listitem>

      <listitem>
	<para>
	  the variable is saved for re-execution when using
	  <command>./config.status --recheck</command> (as used by
	  <link linkend="automake.maintainer-mode">maintainer
	  mode</link>).
	</para>
      </listitem>
    </itemizedlist>
  </section>

</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "english"
   End:
-->
