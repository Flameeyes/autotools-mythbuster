<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="autoconf.caching">
  <?dbhtml filename="autoconf/caching.html" ?>

  <title>Caching Results</title>

  <indexterm zone="autoconf.caching">
    <primary>AC_CACHE_VAL (macro)</primary>
  </indexterm>

  <indexterm zone="autoconf.caching">
    <primary>config.cache (file)</primary>
  </indexterm>

  <para>
    For the way <application>autoconf</application> is designed, some
    tests are quite expensive, in terms of the required work from the
    system running the <filename>configure</filename> script. For this
    reason, in the design of <application>autoconf</application> there
    is place for a caching system.
  </para>

  <para>
    This system provides caching both for the current run (so that the
    same check in multiple code paths will not require execution of
    the same test twice) and on-disk caching for multiple runs. At the
    same time it's also often used to provide fake values to sidestep
    tests that might lead to wrong results.
  </para>

  <warning>
    <para>
      The use of this feature is designed for a very narrow use case,
      as you can see in <xref linkend="autoconf.caching.whynot"
      />. Please think twice before deciding to make use of this
      technique when <emphasis>running</emphasis> a
      <filename>configure</filename> script.
    </para>

    <para>
      If you're writing a <filename>configure.ac</filename> file,
      though, read on, and follow this advice for properly caching the
      values, as having cached tests available becomes pretty useful
      especially when debugging mistakes.
    </para>
  </warning>

  <section xml:id="autoconf.caching.whynot">
    <title>Why Caching is Not What You're Looking For</title>

    <para>
      Often enough, ideas appear of using the caching system of
      <application>autoconf</application> to avoid repeating the same
      tests when configuring different projects. This approach is
      dangerous and unstable for very good reasons.
    </para>

    <para>
      The first problem is that, while the caching system does provide
      some sanity checks to ensure that the user hasn't changed
      settings like compiler and flags used to build between different calls; it
      does not verify that the tests are executed under the same
      conditions. For instance, it does not take into consideration
      the current selected language dialect.
    </para>

    <para>
      As an example, take two almost identical <filename>configure.ac</filename> files available as
      examples of this guide: a <link linkend="autoconf.caching.whynot.ex1">default C variant</link>
      and a <link linkend="autoconf.caching.whynot.ex2">C99 variant</link>. These two scripts only
      check for <link
      linkend="autoconf.caching.whynot.ex3"><filename>thisonlyworksonc99.h</filename></link> simply
      changing the language dialect (not even the full language) changes the results coming from the
      two different runs:
    </para>

    <programlisting><![CDATA[
whynot % ./configure.c CPPFLAGS="-I."
[ ... ]
checking thisonlyworksonc99.h usability... no
checking thisonlyworksonc99.h presence... no
checking for thisonlyworksonc99.h... no
configure.c: creating ./config.status

whynot % ./configure.c99 CPPFLAGS="-I."
[ ... ]
checking thisonlyworksonc99.h usability... yes
checking thisonlyworksonc99.h presence... yes
checking for thisonlyworksonc99.h... yes
configure.c99: creating ./config.status

]]></programlisting>

    <para>
      Because of the way the header is designed, it will only be found
      when C99 is used (remember that starting from
      <application>autoconf</application> 2.64, the “usability” test
      is the dominant one; see <xref linkend="autoconf.headers" />),
      but if you were to use the same cache file for both scripts,
      you'd be having some funky, unstable results:
    </para>

    <programlisting><![CDATA[
whynot % ./configure.c CPPFLAGS="-I." -C
configure.c: creating cache config.cache
[ ... ]
checking thisonlyworksonc99.h usability... no
checking thisonlyworksonc99.h presence... no
checking for thisonlyworksonc99.h... no
configure.c: updating cache config.cache
configure.c: creating ./config.status

whynot % ./configure.c99 CPPFLAGS="-I." -C
configure.c99: loading cache config.cache
[ ... ]
checking for thisonlyworksonc99.h... (cached) no
configure.c99: updating cache config.cache
configure.c99: creating ./config.status

whynot % rm config.cache

whynot % ./configure.c99 CPPFLAGS="-I." -C
configure.c99: creating cache config.cache
[ ... ]
checking thisonlyworksonc99.h usability... yes
checking thisonlyworksonc99.h presence... yes
checking for thisonlyworksonc99.h... yes
configure.c99: updating cache config.cache
configure.c99: creating ./config.status

whynot % ./configure.c CPPFLAGS="-I." -C
configure.c: loading cache config.cache
[ ... ]
checking for thisonlyworksonc99.h... (cached) yes
configure.c: creating ./config.status
]]></programlisting>

    <para>
      As you can see, <application>autoconf</application> does not
      validate whether the cache comes from the same
      <filename>configure</filename> script, nor if the same compiler
      options are enabled in both runs.
    </para>

    <para>
      It doesn't stop here though, since you can write your own tests,
      you can easily re-use the same cache value variable name for very
      different meanings, and that will also produce bogus results. In
      turn bogus results can create multi-layer failures that are also
      difficult to debug unless it is known that the cache was
      polluted.
    </para>

    <para>
      To make the matter worse, a common but subtle problem with cache
      pollution is related to <link
      linkend="pkgconfig"><application>pkg-config</application></link>,
      and the fact that it allows the developer to choose any given
      keyword to check for any package using the same name; like
      <constant>NEEDED</constant> or <constant>COMMON</constant>, to
      look for different libraries in different projects also deems the
      cache to be unusable between them.
    </para>

    <para>
      Bottom-line suggestion is that you should make use of caching
      sparingly, when developing code, without touching the
      <filename>configure.ac</filename> file nor changing the
      environment, which is, indeed, a very limited use of caching.
    </para>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
