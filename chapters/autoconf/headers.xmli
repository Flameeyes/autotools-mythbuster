<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="autoconf.headers">
  <title>Checking For Headers</title>

  <para>
    The header files describe the public interface of a C (or C++)
    library. To use a library you need its public headers, so to make
    sure a library is available, you have to ensure that its headers
    are available.
  </para>

  <para>
    Especially in the Unix world, where a shared library already
    defines its public binary interface or <acronym>ABI</acronym>, the
    presence of headers can tell you whether the development packages
    needed to build against that library are present.
    </para>

  <para>
    To make sure that headers can be found properly,
    <application>autoconf</application> provides two macros:
    <function>AC_CHECK_HEADER</function> to find a single header or
    <function>AC_CHECK_HEADERS</function> to look for more than one
    header at a time (either replacement headers or independent
    headers).
  </para>

  <section xml:id="autoconf.headers.multiple-headers">
    <title>Checking for one out of Multiple Headers</title>

    <para>
      It's not unlikely that we have to look for one out of a series
      of possible replacement headers in our software. That's the case
      when we've got to support libraries that might be installed at
      top level, in subdirectories, or when older non-standard headers
      are replaced with new equivalent ones.
    </para>

    <para>
      A very common case is looking for either one of
      <filename>stdint.h</filename>, <filename>inttypes.h</filename>
      or <filename>sys/types.h</filename> headers to declare the
      proper standard integer types (such as <type>uint32_t</type>)
      for backward compatibility with older non-standard C libraries.
    </para>

    <para>
      In this situation, the order used above is also a priority
      order; since the first is the preferred header and the third is
      the least favourite one. It doesn't make sense to test for any
      other headers once the first is found. There also has to be an
      error message if none at all of those is available.
    </para>

    <para>
      The macro <function>AC_CHECK_HEADERS</function> provides all the
      needed parameters to implement just that. The first parameter of
      the macro is a sh-compatible list, rather than an M4 list, and
      it's argument to a <function>for</function> call in the
      <filename>configure</filename> file and there is an action
      executed once the header is found (actually, there is one also
      when the header is <emphasis>not</emphasis> found, but we're not
      going to use that one.
    </para>

    <programlisting><![CDATA[
AC_CHECK_HEADERS([stdint.h inttypes.h sys/types.h],
	[mypj_found_int_headers=yes; break;])

AS_IF([test "x$mypj_found_int_headers" != "xyes"],
	[AC_MSG_ERROR([Unable to find the standard integers headers])])
]]></programlisting>

    <para>
      In this case, the <filename>configure</filename> script will
      check for the headers in sequence, stopping at the first it
      finds (thanks to the <function>break</function>
      instruction). This reduces the amount of work needed for the
      best case scenario (a modern operating system providing the
      standard header <filename>stdint.h</filename>).
    </para>

    <para>
      Since exactly one of the actions (found or not found) is
      executed per each header tested, we cannot use the 'not found'
      action to error out of the script, otherwise any system lacking
      <filename>stdint.h</filename> (the first header tested) will be
      unable to complete the step. To solve this, we just set a
      convenience variable once a header is found and test that it has
      been set.
    </para>
  </section>

  <section xml:id="autoconf.headers.present-not-compiled">
    <title>Headers Present But Cannot Be Compiled</title>

    <para>
      Since August 2001, <application>autoconf</application> has been
      warning users about headers that are present in the system but
      couldn't be compiled, when testing for them with either of the
      two macros explained previously.
    </para>

    <para>
      Before that time, the macros only checked if the header was
      present by asking the preprocessor for it. While this did find
      the whereabouts of headers, it included no information regarding
      their usability. Without checking if the headers compiled, it
      was impossible to say if the header was valid for the language
      variety chosen (like C99, or C++), or if it required unknown
      dependencies.
    </para>

    <para>
      To solve the problem, it was decided to use the actual compiler
      for the currently selected language to look for the headers, but
      for compatibility with the previous version at the moment of
      writing, both tests are performed for each header checked, and
      the <quote>header present but cannot be compiled</quote> warning
      is reported if the preprocessor accepts an header while the
      compiler refuses it.
    </para>

    <para>
      <!-- TODO: write something about the config.log file and link it here! -->
      There are multiple causes for this problem, and thus to solve
      this warning, you have to identify the actual cause of it. For
      reference, you can found here some examples.
    </para>

    <example>
      <title>
	header present but cannot be compiled: wrong language dialect
      </title>

      <note>
	<para>
	  This example is based on an actual mistake in the
	  <productname>KDE</productname>
	  <productnumber>3.5.10</productnumber> build system for the
	  <application>kdepim</application> package.
	</para>
      </note>

      <para>
	One situation where the header files are present but cannot be
	compiled is when they are not designed to work with a
	particular language variety. For instance, an header might not
	be compatible with the C99 dialect, or with C++, or on the
	other hand it might require C99 or C++.
      </para>

      <para>
	If that particular language is selected, though, and the
	header is tested for, the behaviour of rejecting the header is
	indeed what the developers are expecting. On the other hand,
	it's possible that the test is being done with a different
	language than the one where the header is going to be used.
      </para>

      <para>
	For instance, take the following snippet, that tries to look
	for the <filename>bluetooth/bluetooth.h</filename> header from
	<application>bluez-libs</application>, using a strict C
	compiler:
      </para>

      <programlisting>
<xi:include parse="text"
	    href="../../examples/forwardporting/autoconf-2.64/headers/language/configure.ac.wrong"
	    /></programlisting>

      <para>
	This will issue the warning discussed above when running
	<filename>configure</filename>:
      </para>

      <programlisting><![CDATA[
checking bluetooth/bluetooth.h usability... no
checking bluetooth/bluetooth.h presence... yes
configure: WARNING: bluetooth/bluetooth.h: present but cannot be compiled
configure: WARNING: bluetooth/bluetooth.h:     check for missing prerequisite headers?
configure: WARNING: bluetooth/bluetooth.h: see the Autoconf documentation
configure: WARNING: bluetooth/bluetooth.h:     section "Present But Cannot Be Compiled"
configure: WARNING: bluetooth/bluetooth.h: proceeding with the preprocessor's result
configure: WARNING: bluetooth/bluetooth.h: in the future, the compiler will take precedence
checking for bluetooth/bluetooth.h... yes
]]></programlisting>

      <para>
	The reason for the above warnings can be found by looking at
	the <filename>config.log</filename> file that the
	<filename>configure</filename> script writes:
      </para>

      <programlisting><![CDATA[
configure:3338: checking bluetooth/bluetooth.h usability
configure:3355: gcc -c -std=iso9899:1990  conftest.c >&5
In file included from conftest.c:51:
/usr/include/bluetooth/bluetooth.h:117: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
/usr/include/bluetooth/bluetooth.h:121: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'void'
configure:3362: $? = 1
]]></programlisting>

      <para>
	Looking at those lines in the header file shows that it is
	using the <emphasis>inline</emphasis> keyword, which is not
	supported by the C90 language (without extensions). If the
	header is checked for, though, it means it's going to be used,
	and even if it does not work with the selected C90 dialect, it
	might work with the C++ language used by the actual program.
      </para>

      <para>
	The <filename>configure.ac</filename> file can then be fixed
	by changing it to the following code:
      </para>

      <programlisting>
<xi:include parse="text"
	    href="../../examples/forwardporting/autoconf-2.64/headers/language/configure.ac.correct"
	    /></programlisting>
    </example>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "english"
   End:
-->
