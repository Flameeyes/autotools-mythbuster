<?xml version="1.0" encoding="utf-8" ?>
<!--
SPDX-FileCopyrightText: 2009- Diego Elio Pettenò

SPDX-License-Identifier: CC-BY-SA-3.0
-->

<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="autoconf.macros.external">
  <title>External Macro Files</title>

  <para>
    Since <application>autoconf</application> macros are often developed to solve generic problems,
    rather than specific problems of a project (otherwise direct M4sh code would be good enough for
    most uses), they are often shared across packages and across projects.
  </para>

  <para>
    In the past, most packages shipped their own macro file with a standardised macro to search for
    them in a system at build time, making use of particularities of the package, or through
    configuration helper scripts. For most projects these have been phased out in favour of <link
    linkend="pkgconfig"><application>pkg-config</application></link>.
  </para>

  <para>
    There are, though, reusable macros, shipped with various projects or present in archives, such
    as the <link xl:href="http://www.nongnu.org/autoconf-archive/">Autoconf
    Archive</link>. Depending on the nature of the macro, the file where it is written is either
    installed in the system (to be used by <application>autoconf</application> directly) or is
    simply available to be picked up from the source distribution.
  </para>

  <para>
    To take two examples, the <filename>pkg.m4</filename> file that is shipped with
    <application>pkg-config</application> is installed in the system, while the
    <filename>attributes.m4</filename> macro file, shipped with <productname>xine-lib</productname>,
    <productname>PulseAudio</productname> and the <productname>LScube</productname> projects, is
    simply shared by copying it out of the source distribution or repositories.
  </para>

  <para>
    When using external macro files to store custom and generic macros (which is, most of the time,
    the suggested approach), you have to tell <application>autoconf</application> where to look for
    them. Many different approaches are available for this task, and this guide will try to explain
    most, if not all, of them.
  </para>

  <note>
    <para>
      While there is no functional requirement for that, the guide will assume that all your macro
      files are inside the <filename>m4/</filename> directory; this is the most common directory
      used to keep the macro files, and for the principle of least surprise, you probably want to
      also put yours there.
    </para>

    <para>
      Some projects use other directory names (<filename>autoconf/</filename>,
      <filename>ac-macros/</filename>, …) but this often adds more work for the distributors
      packaging or fixing the software, since they have to check where to find the macros.
    </para>
  </note>

  <section>
    <title>With Just <application>autoconf</application></title>

    <para>
      When not using <application>automake</application>, and just relying on
      <application>autoconf</application>, the macro files are not picked up by default.
    </para>

    <para>
      Indeed, if you just added your testing macro in the <filename>configure.ac</filename> file,
      you'll be finding it just copied over in the final <filename>configure</filename>:
    </para>

    <programlisting><![CDATA[
% cat m4/test.m4
AC_DEFUN([AUTOTOOLS_MYTHBUSTER], [
  AC_MSG_CHECKING([testing])
  AC_MSG_RESULT([ok])
])
% fgrep AUTOTOOLS_MYTHBUSTER configure.ac
AUTOTOOLS_MYTHBUSTER()
% fgrep AUTOTOOLS_MYTHBUSTER configure
AUTOTOOLS_MYTHBUSTER()
]]></programlisting>

    <para>
      Indeed, what you have to do is to force the actual inclusion of the macro file in the
      <filename>configure.ac</filename> file.
    </para>

    <indexterm>
      <primary>m4_include (macro)</primary>
    </indexterm>

    <example>
      <title>Including an External Macro File without <application>automake</application></title>

      <programlisting><![CDATA[
AC_INIT

m4_include([m4/autotools_mythbuster.m4])

AUTOTOOLS_MYTHBUSTER
]]></programlisting>

      <para>
        The <function>m4_include</function> directive works quite like the
        <function>#include</function> directive of the C programming language, and simply copies
        over the content of the file.
      </para>

      <para>
        To not include comments starting with <literal>#</literal> in the generated
        <filename>configure</filename> script call the <function>m4_include</function> before the
        <function>AC_INIT</function>.
      </para>
    </example>

    <para>
      The only file that is read by <application>autoconf</application> other than the
      <filename>configure.ac</filename> file is the <filename>aclocal.m4</filename> file. This file
      is often managed with the <application>aclocal</application> utility that ships with <link
      linkend="automake">automake</link>, so it's really suggested not to make use of it manually.
    </para>

    <section>
      <title>What About <command>-I m4</command>?</title>

      <para>
        The <application>autoconf</application> tool has a parameter <command>-I</command> that
        allows adding a directory to the search path for the conversion. This command is also not
        used to discover macro files.
      </para>

      <para>
        What it is useful for is to avoid using the full path name of a macro file, letting it be
        picked up either from the system or from the local directory (giving priority to the system
        copy).
      </para>

      <programlisting><![CDATA[
AC_INIT

m4_include([pkg.m4])

PKG_PROG_PKG_CONFIG
]]></programlisting>

      <para>
        In this case, the macro file is included with the generic base name value of
        <filename>pkg.m4</filename> instead of <filename>m4/pkg.m4</filename>. If the macro file is
        available to the system (in <filename>/usr/share/autoconf</filename> for instance) the macro
        will be picked up from there; otherwise, if <command>autoconf -I m4</command> is used, the
        one in the <filename>m4</filename> directory will be used.
      </para>
    </section>
  </section>

  <section>
    <title>Using <function>AC_CONFIG_MACRO_DIR</function> (and aclocal)</title>

    <indexterm>
      <primary>AC_CONFIG_MACRO_DIR (macro)</primary>
    </indexterm>

    <indexterm>
      <primary>AC_CONFIG_MACRO_DIRS (macro)</primary>
    </indexterm>

    <indexterm>
      <primary>aclocal</primary>
    </indexterm>

    <indexterm>
      <primary><filename>Makefile.am</filename> variables</primary>
      <secondary>ACLOCAL_AMFLAGS (deprecated)</secondary>
    </indexterm>

    <para>
      Starting from version 2.58, <application>autoconf</application> provide the macro
      <function>AC_CONFIG_MACRO_DIR</function> to declare where additional macro files are to be put
      and found. The argument passed to this macro is commonly <literal>m4</literal>.
    </para>

    <para>
      This macro, for the longest time, has been used only by <link
      linkend="libtool"><application>libtool</application></link> starting from version 2.0, to
      identify where to copy its own macro files when using <command>libtoolize --copy</command>.
    </para>

    <para>
      Starting from version 1.13, <link
      linkend="automake"><application>automake</application></link> augments autoconf with a macro
      called <function>AC_CONFIG_MACRO_DIRS</function>, that provides a space-separated list of
      directories to use for looking up m4 files. The same macro will be available as part of
      autoconf 2.70.
    </para>

    <para>
      The list of directories declared in these macros will be used by the
      <application>aclocal</application> tool to look up the macros called by the
      <filename>configure.ac</filename> file. After all the macros (and their dependencies) have
      been gathered, it will create a <filename>aclocal.m4</filename> file that
      <application>autoconf</application> will use.
    </para>

    <programlisting><![CDATA[
% cat configure.ac
AC_INIT

PKG_PROG_PKG_CONFIG

% aclocal
% ls -l aclocal.m4
-rw-r--r-- 1 flame flame 5775 2009-08-06 10:17 aclocal.m4

% fgrep PKG_PROG_PKG_CONFIG aclocal.m4 | grep AC_DEFUN
AC_DEFUN([PKG_PROG_PKG_CONFIG],

% autoconf
% ./configure
checking for pkg-config... /usr/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
]]></programlisting>

    <para>
      In contrast to what <application>autoconf</application> does,
      <application>aclocal</application> takes its macro files from the
      <filename>/usr/share/aclocal</filename> path, where most software installs them, and copies
      the macro files where they are defined directly inside <filename>aclocal.m4</filename>,
      appending them to one another. Then <application>autoconf</application> reads the
      file as if it was part of its macros' library.
    </para>

    <para>
      Local macros will also be looked up, but their content will not be appended to
      <filename>aclocal.m4</filename>. Instead, it will use the <function>m4_include</function>
      directive, to include the local file.
    </para>

    <para>
      The search path for local files, as of version 1.13 of <application>automake</application>, is
      defined by the directories listed in <function>AC_CONFIG_MACRO_DIR</function> and
      <function>AC_CONFIG_MACRO_DIRS</function> arguments. Previously, it was common to use a
      variable defined in <filename>Makefile.am</filename> (<varname>ACLOCAL_AMFLAGS</varname>) to
      pass extra parameters to <application>aclocal</application>. This behaviour is deprecated and
      will soon not be supported.
    </para>

    <programlisting><![CDATA[
% cat configure.ac
AC_INIT

AC_CONFIG_MACRO_DIR([m4])

AUTOTOOLS_MYTHBUSTER
% aclocal
% cat aclocal.m4
# generated automatically by aclocal 1.13 -*- Autoconf -*-

dnl […] snip […]

m4_include([m4/autotools_mythbuster.m4])

% autoconf
% ./configure
checking testing... ok
]]></programlisting>

    <section>
      <title>The <filename>acinclude.m4</filename> file.</title>

      <para>
        In addition to searching its own directory and the include path given on the command line,
        the <application>aclocal</application> tool takes into consideration another file:
        <filename>acinclude.m4</filename>. This file is also copied (rather than included) in the
        final output of the tool, and then picked up by <application>autoconf</application>.
      </para>

      <para>
        This file is often used to put together multiple macros from different macro files, without
        having to use an <filename>m4/</filename> directory or equivalent. This usage is discouraged
        by this guide, because it often leads to overly long files, with no logical distinction
        between macros.
      </para>

      <para>
        Once again, this has to be considered an old interface kept for compatibility; the
        <filename>m4/</filename> macro directory with its macro files is the suggested method of
        adding new macros to a project.
      </para>
    </section>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
