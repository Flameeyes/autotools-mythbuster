<!--
SPDX-FileCopyrightText: 2009- Diego Elio Pettenò

SPDX-License-Identifier: CC-BY-SA-3.0
-->

<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="libtool.wrappers">
  <?dbhtml filename="libtool/wrappers.html" ?>

  <title><application>libtool</application> wrappers</title>

  <para>
    When building programs with the help of <application>libtool</application>, your targets in the
    build directory consist of shell scripts, instead of the final ELF executable files. These shell
    scripts are designed to workaround some limitations present when working with shared objects in
    different operating systems.
  </para>

  <para>
    The most important problem is that, if one of the executable files is referencing a library that
    was just built, and is not installed in the system already, you have to tell the dynamic loader
    where said library has to be found — this is even more important when you are building a new
    version of a library that is already installed on the system. While some operating systems look
    on the executable's directory for libraries to load, most Unix systems do not, so to point the
    loader to the new libraries, you have to either use the <emphasis>rpath</emphasis> feature, or
    you have to set some special environment variables, the name and semantics of which depend on
    the operating system itself.
  </para>

  <para>
    Both methods have advantages and disadvantages: <emphasis>rpath</emphasis> has the least
    overhead during building, but it can (generally) only be set at build time by the link editor,
    and, since it shouldn't be present on the final, installed executable, usually requires
    relinking all of the files before installation, which is time-consuming.
  </para>

  <para>
    On the other hand, using the script approach causes headaches with most debuggers (even though
    there is a designed <command>libtool --mode=debug</command> command): when using the wrapper
    script, your output file becomes, as said above, a POSIX <command>sh</command> script, while the
    actual linked executable file is generated within the <filename>.libs</filename> directory. For
    instance if your target is called <filename>foo</filename>, the actual executable will be
    <filename>.libs/lt-foo</filename>.
  </para>

  <indexterm>
    <primary>libtool options</primary>
    <secondary>-no-install</secondary>
  </indexterm>

  <para>
    Obviously, the wrapper/launcher script adds some overhead over the startup of the files
    themselves; since sometimes you're building test programs that are executed many times on the
    same build process, <application>libtool</application> provides you with a system to disable
    the wrapper scripts and instead optimise the output to be executed in place. This is done by
    providing the <option>-no-install</option> flag to the <varname>LDFLAGS</varname> list.
  </para>

  <example>
    <title>building a test program optimised for in-place execution</title>

    <programlisting><![CDATA[
check_PROGRAMS = test1
test1_SOURCES = test1.c
test1_LDADD = libmylib.la
test1_LDFLAGS = -no-install
]]></programlisting>
  </example>

  <para>
    When using <option>-no-install</option>, <command>libtool</command> tells the linker to set the
    <emphasis>rpath</emphasis> for the output file to the full path of the
    <filename>.libs</filename> directory, instead of using a wrapper script to set up the
    <envar>LD_LIBRARY_PATH</envar>. This, in turn, eases the debugging phase, as tools such as
    <command>gdb</command> can be used directly.
  </para>

  <para>
    While the <option>-no-install</option> option could be very useful when building a work-copy of
    a project to be tested, and especially debugged, some non-GCC compilers, as well as GCC 4.6 and
    later, throw an error when they are given unrecognized command-line flags, making it impossible
    nowadays to pass the flag down to <command>./configure</command> to build a non-wrapper copy of
    a project.
  </para>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
