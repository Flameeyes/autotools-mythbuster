<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="automake.silent">
  <title>Silent Building with Automake</title>

  <indexterm zone="automake.silent">
    <primary>automake options</primary>
    <secondary>silent-rules</secondary>
  </indexterm>

  <indexterm>
    <primary>silent-rules</primary>
    <see>automake options, silent-rules</see>
  </indexterm>

  <indexterm>
    <primary>AM_SILENT_RULES (macro)</primary>
    <see>automake options, silent-rules</see>
  </indexterm>

  <para>
    While the default Makefiles generated by
    <application>automake</application> have always been very verbose
    during build, which has often been criticised, starting from
    version 1.11 a new option is available to enable “silent make
    mode” where the output resembles more that of the Linux kernel
    build.
  </para>

  <programlisting><![CDATA[
test-hellow % make V=1
make  all-am
make[1]: Entering directory `/home/flame/test-hellow'
gcc -DHAVE_CONFIG_H -I.     -g -O2 -MT hellow.o -MD -MP -MF .deps/hellow.Tpo -c -o hellow.o hellow.c
mv -f .deps/hellow.Tpo .deps/hellow.Po
gcc  -g -O2   -o hellow hellow.o  
make[1]: Leaving directory `/home/flame/test-hellow'

test-hellow % make V=0
make  all-am
make[1]: Entering directory `/home/flame/test-hellow'
  CC     hellow.o
  CCLD   hellow
make[1]: Leaving directory `/home/flame/test-hellow'
]]></programlisting>

  <para>
    Even though <application>automake</application> version 1.11
    implements this build method, it is not enabled by default, and
    actually requires a double opt-in to be enabled by default. The
    reason for this is that the new functionality is only tested
    to work with the GNU implementation of
    <application>make</application>, and so disables the <link
    linkend="automake.portability">portability warnings</link>.
  </para>

  <para>
    The first opt-in is to enable the behaviour, which is done inside
    <filename>configure.ac</filename> in either of two methods:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	passing the <option>silent-rules</option> option at the call
	to <function>AM_INIT_AUTOMAKE</function> as is done with many
	other options;
      </para>
    </listitem>

    <listitem>
      <para>
	using the <function>AM_SILENT_RULES</function> macro directly
	after the initialisation;
      </para>
    </listitem>
  </itemizedlist>

  <para>
    In this guide, the recommended way is to use the explicit
    macro; this has two main advantages: the first is that you can
    easily make the call conditional to its actual presence, keeping
    backward compatibility with older
    <application>automake</application> versions; the second is that
    the call can also change the default behaviour.
  </para>

  <para>
    Indeed, just enabling the feature through either
    <function>AM_SILENT_RULES</function> or the
    <option>silent-rules</option> option, will not build
    silently, because the silent rules are, by default, turned
    off. Once again, you have two methods to enable them:
  </para>
    
  <itemizedlist>
    <listitem>
      <para>
	running <command>./configure --enable-silent-rules</command>
	that enable the silent rules by default;
      </para>
    </listitem>

    <listitem>
      <para>
	running <command>make V=0</command> to disable the “verbose”
	build;
      </para>
    </listitem>
  </itemizedlist>

  <para>
    To enable the silent rules by default (which can be turned off
    with the opposite options (<command>./configure
    --disable-silent-rules</command> and <command>make V=1</command>),
    you have to pass as first parameter of the
    <function>AM_SILENT_RULES</function> the value
    <constant>yes</constant>:
  </para>

  <programlisting><![CDATA[
AM_SILENT_RULES([yes])
]]></programlisting>

  <section>
    <title>Silent Rules and Backward Compatibility</title>

    <para>
      Since the feature of building with silent rules is only
      available starting from <application>automake</application>
      1.11, just enabling the feature in
      <filename>configure.ac</filename> is going to stop all the older
      versions from building the project.
    </para>

    <para>
      If this is a desired situation, you can also add the
      <option>1.11</option> token to
      <function>AM_INIT_AUTOMAKE</function> to declare that at least
      version 1.11 of <application>automake</application> is needed
      for regeneration. See <xref linkend="automake.options.version"
      />.
    </para>

    <para>
      If, instead, backward compatibility is still needed, for
      instance because there are some systems where the code is tested
      during development that don't have a new enough
      <application>automake</application> yet, it's quite simple to
      implement the silent rules support conditionally, by using
      explicitly the <function>AM_SILENT_RULES</function> macro.
    </para>

    <example>
      <title>Using Silent Rules Without Forcing Automake 1.11</title>

      <programlisting><![CDATA[
AM_INIT_AUTOMAKE([foreign])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])
]]></programlisting>

      <para>
	This fragment (the actual important part is the call to
	<function>m4_ifdef</function>, but it <emphasis>has</emphasis>
	to go after <function>AM_INIT_AUTOMAKE</function>, will call
	the silent rules macro only if it's actually defined. On older
	<application>automake</application> versions, this will not be
	defined and the whole macro will be skipped.
      </para>

      <note>
	<para>
	  While this allows for backward compatibility, it is
	  suggested never to keep an overly long backward
	  compatibility, as that increases the number of workarounds
	  and tricks needed to avoid breaking the older versions, as
	  features are implemented and made use of.
	</para>

	<para>
	  As of today, this trick should probably be used only to keep
	  backward compatibility with very old systems where only
	  <application>automake</application> 1.10 is available.
	</para>
      </note>
    </example>
  </section>

  <section>
    <title>Custom Silent Rules</title>

    <para>
      While <application>automake</application> has support for
      silencing all its default rules, when using custom rules you end
      up outside the scope of the provided support. Adding support for
      silent rules to custom rules is not exceedingly difficult.
    </para>

    <para>
      The code that hides the actual command and just replaces it with
      the <constant>CC</constant> string is exported in the form of
      the variable <varname>AM_V_CC</varname>, and so on replacing the
      output string. Since most custom rules are used for generating
      extra files, the <varname>AM_V_GEN</varname> variable is also
      available.
    </para>

    <para>
      Just prefixing the correct variable expansion in front of the
      rule is enough to support silent rules; the same method
      explained above allows for selecting the verbose output or the
      silent one for the custom rules.
    </para>

    <example>
      <title>Silent Custom Rule to Generate a File</title>

      <programlisting><![CDATA[
%-bar.pc: %.pc
	$(AM_V_GEN)$(LN_S) $(notdir $^) $@
]]></programlisting>
    </example>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
