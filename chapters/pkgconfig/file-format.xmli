<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="pkgconfig.file-format">
  <?dbhtml filename="pkgconfig/file-format.html" ?>

  <title>File Format of <filename>*.pc</filename> Files</title>

  <para>
    The heart of <application>pkg-config</application> lies in the data files that the various
    applications install. These data files are actually simple text files with some special syntax
    thrown in. They are neither INI-style configuration files, nor simple key-value pairs and are
    not even complete scripts.
  </para>

  <para>
    The name of the file is the name of the module that can be tested with <link
    linkend="pkgconfig.pkg_check_modules"><function>PKG_CHECK_MODULES</function></link>
    function. The content is simple text, which can be divided into variables definitions and
    keyword declaration. Both are designed to be kept in a single line.
  </para>

  <para>
    Variables can be used to define temporary values, but they can also provide arbitrary
    information to <application>pkg-config</application> users when needed (see <xref
    linkend="pkgconfig.variables" />). Keywords instead are pre-defined and are used by the commands
    available as part of <application>pkg-config</application> itself.
  </para>

  <variablelist>
    <varlistentry>
      <term>Name</term>
      <listitem>
        <para>
          Provides a human-readable name for the package; it does not
          have to be the same as the module name, that is instead
          decided based on the datafile's name.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Version</term>
      <listitem>
        <para>
          Complete version of the package; it supports most of the
          sane version specifications. Please note that only a single
          data file for a module can be used so you might have to
          duplicate part of the version information in both the module
          name and this keyword.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry xml:id="pkgconfig.file-format.requires">
      <term>Requires</term>
      <term>Conflicts</term>
      <listitem>
        <para>
          These terms specify the dependencies of a module, with or without
          version limitations. As the names of the terms indicate,
          <varname>Requires</varname> lists the other modules that
          need to be present, while <varname>Conflicts</varname>
          lists the packages that <emphasis>cannot</emphasis> be
          present when making use of the current module.
        </para>

        <para>
          You cannot list the same module more than once in the
          requirements, but you can list it as many time as you want
          in the conflicts. All the modules can optionally have a
          version specifier, and you can use the seven basic
          comparisons as defined by the C language:
          <function>=</function>, <function>&lt;</function>,
          <function>&gt;</function>, <function>&lt;=</function> and
          <function>&gt;=</function>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Cflags</term>
      <term>Libs</term>
      <listitem>
        <para>
          The two fundamental specifications that the
          <application>pkg-config</application> call will report to
          its caller, such as the macro discussed in <xref
          linkend="pkgconfig.pkg_check_modules" />. They represent the
          parameters to pass to the compiler and linker command-lines
          to make use of the current module.
        </para>

        <para>
          It's important not to list the entries related to further
          dependencies, since <application>pkg-config</application> will
          take care of running transitive dependency discovery, see
          also <xref linkend="pkgconfig.dependencies" />.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Requires.private</term>
      <term>Libs.private</term>
      <listitem>
        <para>
          More specific details about the dependencies of a module, see <xref
          linkend="pkgconfig.static-link" />.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Description</term>
      <term>URL</term>
      <listitem>
        <para>
          Brief information about the package, mostly self-explaining.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <section>
    <title>Search paths</title>

    <indexterm>
      <primary>PKG_CONFIG_PATH (variable)</primary>
    </indexterm>

    <indexterm>
      <primary>PKG_CONFIG_LIBDIR (variable)</primary>
    </indexterm>

    <para>
      By default, <application>pkg-config</application> will search
      for modules installing data files in two directories: one for
      the architecture-specific modules, that is installed in a
      sub-directory of the libdir (usually
      <filename>/usr/lib/pkgconfig</filename>), and one for
      non-architecture specific modules, that can be shared among
      multiple architectures (usually
      <filename>/usr/share/pkgconfig</filename>).
    </para>

    <para>
      You can add further paths to its search by defining the <varname>PKG_CONFIG_PATH</varname>, or
      you can replace the default search paths by setting the
      <varname>PKG_CONFIG_LIBDIR</varname>. These tricks are often used to create wrappers to
      <application>pkg-config</application> for cross-compilation. As described in <xref
      linkend="pkgconfig.cross-compiling" />.
    </para>
  </section>

  <section>
    <title>Include and library paths</title>

    <para>
      When providing the compiler and linker flags, you should always provide those to direct said
      tool to the paths where the library and its headers are to be found (namely,
      <option>-I</option> and <option>-L</option>, respectively). It is thus common practice to get
      the <filename>configure</filename> script to substitute variables on a template file, and use
      them to set the flags.
    </para>

    <example>
      <title>Simple project's template file and <filename>configure.ac</filename> code.</title>

      <para>
        The following code is a (snippet of) a template file that would then be named along the
        lines of <filename>foo.pc.in</filename>:
      </para>

      <programlisting><![CDATA[
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@

[...]

Cflags: -I${includedir}
Libs: -L${libdir} -lfoo
]]></programlisting>

      <para>
        In the <filename>configure.ac</filename> files you would have, toward the end:
      </para>

      <programlisting><![CDATA[
AC_CONFIG_FILES([foo.pc])
AC_OUTPUT
]]></programlisting>
    </example>

    <para>
      In the template files this way, it's common to have, beside the obvious definition of
      <varname>libdir</varname> and <varname>includedir</varname>, the definition for
      <varname>prefix</varname> and <varname>exec_prefix</varname>. The reason for this, is that the
      variables are defined by default, in <application>autoconf</application>-generated code, as
      relative to another variable, like this:
    </para>

    <programlisting><![CDATA[
prefix=/usr/local
exec_prefix=${prefix}
libdir=${prefix}/lib
includedir=${prefix}/include
]]></programlisting>

    <para>
      These values require the user to only override the origin point (<varname>prefix</varname>)
      and offsets all the other paths at the same time. Since <application>pkg-config</application>
      has been designed to work in pair with the rest of the autotools stack, the same expansion
      rules apply, making it easy to deal with, as long as the previously shown example is followed.
    </para>

    <para>
      It is important to note that, when the paths are known to
      <application>pkg-config</application> as matching the system default search paths, they are
      not emitted in the output usage, to avoid contaminating the compile and link command lines
      with duplicate search paths that could slow it down considerably and, in some cases, cause
      cross-compiling wrappers to fail.
    </para>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
