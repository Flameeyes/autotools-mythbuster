<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="pkgconfig.pkg_check_modules">
  <title>
    The <function>PKG_CHECK_MODULES</function> Macro
  </title>

  <para>
    The main interface between <application>autoconf</application> and
    <application>pkg-config</application> is the
    <function>PKG_CHECK_MODULES</function> macro, which provides a
    very basic and easy way to check for the presence of a given
    package in the system. Nonetheless, there are some caveats that
    require attention when using the macro.
  </para>

  <section>
    <title>Syntax</title>

    <programlisting><![CDATA[
PKG_CHECK_MODULES(prefix, list-of-modules, action-if-found, action-if-not-found)
]]></programlisting>

    <variablelist>
      <varlistentry>
	<term><parameter>prefix</parameter></term>
	<listitem>
	  <para>
	    Each call to <function>PKG_CHECK_MODULES</function> should
	    have a different <parameter>prefix</parameter> value (with
	    a few exceptions discussed later on). This value, usually
	    provided in uppercase, is used as prefix to the variables
	    holding the compiler flags and libraries reported by
	    <application>pkg-config</application>.
	  </para>

	  <para>
	    For instance, if your prefix was to be
	    <literal>FOO</literal> you'll be provided two variables
	    <varname>FOO_CFLAGS</varname> and
	    <varname>FOO_LIBS</varname>.
	  </para>

	  <para>
	    This will also be used as message during the configure
	    checks: <literal>checking for FOO...</literal>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>list-of-modules</parameter></term>
	<listitem>
	  <para>
	    A single call to the macro can check for the presence of
	    one or more packages; you'll see later how to make good use
	    of this feature. Each entry in the list can have a version
	    comparison specifier.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><parameter>action-if-found</parameter></term>
	<term><parameter>action-if-not-found</parameter></term>

	<listitem>
	  <para>
	    As most of the original
	    <application>autoconf</application> macros, there are
	    boolean values provided, for the cases when the check
	    succeeded or failed. In contrast with almost all of the
	    original macros, though, the default
	    <parameter>action-if-not-fault</parameter> will end the
	    execution with an error for not having found the
	    dependency.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Default variables</title>

    <para>
      By default, the macro will set up two variables, joining the
      given prefix with the suffixes <varname>_CFLAGS</varname> and
      <varname>_LIBS</varname>. The names of these variables can
      be somewhat misleading, since the former will generally provide
      the flags to pass to the preprocessor, rather than the compiler,
      such as include paths and macro definitions, and the latter will
      provide the library paths as well as the libraries themselves.
    </para>

    <para>
      On older versions of <application>pkg-config</application>, the
      macro will <emphasis>not</emphasis> call
      <function>AC_SUBST</function> on these variables; modern
      versions (at least version 0.24) will take care of that
      already. Running it twice, though, will not cause problems, so
      if you have doubts, you should add a snippet like the following.
    </para>

    <programlisting><![CDATA[
AC_SUBST([FOO_CFLAGS])
AC_SUBST([FOO_LIBS])
]]></programlisting>

    <para>
      In addition to defining these variables, the macro also declare
      them as important variables through <link
      linkend="autoconf.adding-options.ac_arg_var"><function>AC_ARG_VAR</function></link>
      so that the user can override the values if needed.
    </para>
  </section>

  <section>
    <title>Modules specification</title>

    <para>
      Beside checking for the presence of a package,
      <application>pkg-config</application> can also check for a
      minimum (or maximum) version of a package, by using C-style
      comparison operators, so that you can ensure that the correct
      version of a package will be used, and not an older or newer
      version.
    </para>

    <para>
      You can also check for multiple packages at the same time, by
      listing one after the other separated by whitespace. This has
      the positive effect of emitting a reduced amount of code rather
      than testing them separately, but also brings one further
      problem: since the variables are supposed to be overridden,
      merging multiple packages together will require the users to
      parse the file to make sure they are passing the values for all
      of them.
    </para>

    <example>
      <title>
	Example of module specifications for <function>PKG_CHECK_MODULES</function>
      </title>

      <programlisting><![CDATA[
PKG_CHECK_MODULES([FOO], [foo >= 3])
PKG_CHECK_MODULES([BAR], [bar < 4])
PKG_CHECK_MODULES([BAZ], [baz = 2])

PKG_CHECK_MODULES([DEPENDENCIES], [foo >= 3 bar baz <= 4])
]]></programlisting>
    </example>
  </section>

  <section>
    <title>Optional Modules</title>

    <para>
      Sometimes, you're supposed to check for given modules only under
      some conditions; it's a trivial setup, but it's one of the most
      common mistakes. The <application>pkg-config</application>
      command is discovered through a separate macro,
      <function>PKG_PROG_PKG_CONFIG</function> that takes care of
      identifying the presence (and version) of
      <application>pkg-config</application> itself. This macro is
      called through <function>AC_REQUIRE</function> so that is
      expanded before <function>PKG_CHECK_MODULES</function>.
    </para>

    <para>
      If you have the <emphasis>first</emphasis> call to
      <function>PKG_CHECK_MODULES</function> inside a bash conditional
      block, the expansion of <function>PKG_PROG_PKG_CONFIG</function>
      will also be conditional, so the following code will fail to
      work, when the condition is false:
    </para>

    <programlisting><![CDATA[
AC_ARG_WITH([gtk], AS_HELP_STRING([--with-gtk], [Build with the GTK+ interface]))

if test "x$with_gtk" = "xyes"; then
   PKG_CHECK_MODULES([GTK], [gtk+-2.0])
fi

PKG_CHECK_MODULES([GLIB], [glib-2.0])
]]></programlisting>

    <para>
      Since the check for GKT+ will not work by default, you'll
      receive the following error if you try to execute
      <filename>configure</filename> without any argument:
    </para>

    <programlisting><![CDATA[
% ./configure
checking for GLIB... no
configure: error: in `/path':
configure: error: The pkg-config script could not be found or is too old.  Make sure it
is in your PATH or set the PKG_CONFIG environment variable to the full
path to pkg-config.

Alternatively, you may set the environment variables GLIB_CFLAGS
and GLIB_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.

To get pkg-config, see <http://pkg-config.freedesktop.org/>.
See `config.log' for more details.
    ]]></programlisting>

    <para>
      You can solve this problem in two ways; you can either
      explicitly call <function>PKG_PROG_PKG_CONFIG</function> outside
      of any conditional, forcing checking for
      <application>pkg-config</application> as soon as possible; or
      you can rewrite your conditionals to use the proper syntax, as
      discussed in <xref linkend="autoconf.m4sh" />.
    </para>

    <para>
      The proper code written in M4sh for the above logic is the
      following:
    </para>

    <programlisting><![CDATA[
AC_ARG_WITH([gtk], AS_HELP_STRING([--with-gtk], [Build with the GTK+ interface]))

AS_IF([test "x$with_gtk" = "xyes"], [
   PKG_CHECK_MODULES([GTK], [gtk+-2.0])
])

PKG_CHECK_MODULES([GLIB], [glib-2.0])
]]></programlisting>

  </section>

  <section>
    <title>Alternatives</title>

    <para>
      Sometimes you need to check for alternative modules; for
      instance you might fall-back from
      <application>udev</application> to
      <application>HAL</application> if the former cannot be
      found. You can easily write this by chaining the
      <function>PKG_CHECK_MODULES</function> call, through the
      <parameter>action-if-not-found</parameter> parameter, keeping
      the best choice outward:
    </para>

    <programlisting><![CDATA[
PKG_CHECK_MODULES([UDEV], [libudev],
   [AC_DEFINE([HAVE_UDEV], [1], [Use UDEV])],
   [PKG_CHECK_MODULES([HAL], [hal],
       [AC_DEFINE([HAVE_HAL], [1], [Use HAL])
    ])
])
]]></programlisting>

    <para>
      It's important here to note that all the parameters here are
      quoted; this is important; if you don't quote the chained
      <function>PKG_CHECK_MODULES</function> call properly, you will
      receive a syntax error when executing
      <command>./configure</command>.
    </para>

    <para>
      As an exception to the rule declared earlier, it's possible to
      use two chained calls to <function>PKG_CHECK_MODULES</function>
      with the same prefix; this is useful to identify cases where you
      need co-variant versions of two packages (explicitly) or if a
      package renames its own data file.
    </para>

    <programlisting><![CDATA[
PKG_CHECK_MODULES([NM], [libnm-glib],, [
   PKG_CHECK_MODULES([NM], [libnm_glib])
])
]]></programlisting>

    <para>
      Even here, remember to quote the chained call.
    </para>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "en_GB"
   End:
-->
