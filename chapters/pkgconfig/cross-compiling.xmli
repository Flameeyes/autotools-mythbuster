<!--
SPDX-FileCopyrightText: 2009- Diego Elio PettenÃ²

SPDX-License-Identifier: CC-BY-SA-3.0
-->

<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="pkgconfig.cross-compiling">
  <?dbhtml filename="pkgconfig/cross-compiling.html" ?>

  <title>Supporting Cross-Compilation</title>

  <para>
    The design of the current <command>pkg-config</command> application and the interface of
    <function>PKG_PROG_PKG_CONFIG</function> allows them to be instrumental in proper
    cross-compilation of software, when used correctly. This only requires following a few simple
    rules.
  </para>

  <section>
    <title>Paths Handling</title>

    <para>
      When cross-compiling packages with multiple dependencies or entire operating system images, the
      focus is usually around one specific directory, called <emphasis>sysroot</emphasis>, used as
      prefix while mimicking the installation layout of a normal running system. This path needs to be
      prefixed to the paths added to the list of searched paths for headers and libraries, i.e., those
      that are passed to <option>-I</option>/<option>-L</option>, respectively to the compiler and
      link editor. At the same time, it should not be compiled in programs to refer to at runtime, nor
      it should be used as the destination path during installation.
    </para>

    <para>
      Since <command>pkg-config</command> original, and main, task is to report flags and paths, it is
      crucial that the sysroot handling is taken into consideration. At the time of writing, with
      version 0.25 of <application>pkgconfig</application> package, this is achieved mainly through
      the <varname>PKG_CONFIG_SYSROOT_DIR</varname> variable, which is set to the path of the sysroot,
      and is inserted in-between the <option>-I</option> or <option>-L</option> flags and the
      following path.
    </para>

    <important>
      <para>
        The content of <varname>PKG_CONFIG_SYSROOT_DIR</varname> is not injected in paths that are
        returned by <command>pkg-config --variable</command>, which makes them unsuitable to use
        during cross-compilation unless specifically designed to be used at that time.
      </para>

      <para>
        To design a variable to contain a path that needs to be used at build time, such as the path
        where a generation script is, you can prefix it in the <filename>.pc</filename> file with
        the built-in variable <literal>${pc_sysrootdir}</literal>.
      </para>
    </important>
  </section>

  <section>
    <title>Tool Calling Conventions</title>

    <para>
      Often, during cross-compilation, builds are mixed of tools to use on the host, and libraries
      to install on the target, making it unfeasible to simply set
      <varname>PKG_CONFIG_SYSROOT_DIR</varname> during the build. To cope with this, the usual
      method to set the variable is to use a wrapper script, with either a custom a general
      <command>${CHOST}-pkg-config</command> name.
    </para>

    <para>
      This is supported by the <application>autoconf</application> macros provided by the package,
      as they all respect <varname>$PKG_CONFIG</varname> if set in the environment, and look for a
      target tool (<command>${CHOST}-pkg-config</command>) before falling back to the usual
      <command>pkg-config</command> command.
    </para>

    <important>
      <para>
        When using the tool to identify variables within a <filename>configure.ac</filename> or
        <filename>Makefile.am</filename> file, it is thus important to not call it directly, but to
        rather call <varname>$PKG_CONFIG</varname> so to not bypass sysroot awareness.
      </para>

      <para>
        It also requires other build systems to respect the value set into the environment, the code
        for which depends on a system by system basis.
      </para>
    </important>

    <para>
      The wrapper script should not only set the <varname>PKG_CONFIG_SYSROOT_DIR</varname> variable:
      when cross-compiling you want to ignore the packages installed in the system, and instead rely
      only on those installed in the cross-compiled environment. This is achieved by resetting
      <varname>PKG_CONFIG_PATH</varname> (which lists additional search paths), and at the same time
      setting <varname>PKG_CONFIG_LIBDIR</varname> to override the default base search paths.
    </para>

    <para>
      As of <application>pkg-config</application> version 0.28, a tool-prefixed executable, with the
      same name as the wrapper documented in this section, is installed by default, both when cross
      compiling and when not, to support multiple ABI on the same system. This does not, though,
      make the wrapper approach obsolete, yet.
    </para>

    <example>
      <title>Common <command>pkg-config</command> wrapper script for cross-compilation</title>

      <programlisting><![CDATA[
#!/bin/sh

SYSROOT=/build/root

export PKG_CONFIG_PATH=
export PKG_CONFIG_LIBDIR=${SYSROOT}/usr/lib/pkgconfig:${SYSROOT}/usr/share/pkgconfig
export PKG_CONFIG_SYSROOT_DIR=${SYSROOT}

exec pkg-config "$@"
]]></programlisting>
    </example>
  </section>
</section>
<!--
   Local Variables:
   mode: nxml
   mode: auto-fill
   mode: flyspell
   ispell-local-dictionary: "british"
   fill-column: 100
   End:
-->
